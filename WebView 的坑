1.API 16之前存在远程调用的安全漏洞：
使用WebView.addJavaScriptInterface时导致远程的攻击者使用Java Reflection API 任意执行java API

2.webView 在布局文件中的时候，当需要销毁一个Activity的时候不能仅仅销魂这个Webview，还需要将这个webView所在的布局容器销魂之后销毁webView，这样才能销毁整个WebView,不会导致安全泄漏。

3.jsBridge 

4.webViewClient.onPageFinishd---->webChromeClient.onProgressChanged

5.后台耗电：webView开启的时候会在后台开启一个线程，Activity 销毁的时候一定要把这个线程销魂掉

6.webView硬件加速导致的渲染问题：在打开webView的时候暂时关闭WebView渲染



----------内存泄漏的问题---------------

1.当一个webviwe持有一个Activity的引用的时候，会导致这个Activity没法回收，跟匿名内部类相似
解决方法：1.独立的线程，简单暴力，不涉及线程间通信
2.动态添加一个WebView,对这个传入的webView使用Context 弱引用。添加的时候将这个WebView放在一个viewGroup中，activity创建的时候add进来，activity销毁时remove出去。
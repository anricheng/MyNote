1.回到过去：
 * git log ：查看所有的提交（带commit id）
 *git reset --hard commit id

2.查看之前的版本：
git reflog :查看所有的操作
找到之前的操作的commit id 使用 *git reset --hard commit id 回到未来

3.建立里程碑：（版本号）
*进入github 项目主页，点击release icon-->draf a new release

4.git flow:
	使用sourceTree git flow:
	*创建一个repo
	*点击gitFlow 产生一个标准的git flow,使用默认操作，此时出现一个develop的branch
	*再次点击git flow :
		建立新的功能：
			每一次创建一个新的功能的时候回在features目录下创建相应的feature分支,当完成开发并点击git flow 会将这个feature 回归到developer branch
		建立新的发布版本：
			这个是根据最新的developer或者其它的commit 来做一个发布，一旦这个发布测试ok就可以直接点击完成此功能此时可以将developer 中的最新开发merge到master 分支中，所以一般这里会有一个tag,标定一个稳定的发布版本
		建立新的修复版本:
			这个会从最新的master 上克隆新的分支，一旦完成后就merge back to both master and develop branch
5.撒销一个合并

	如果你觉得你合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面的命令回到合并之前的状态：

	$ git reset --hard HEAD
	或者你已经把合并后的代码提交，但还是想把它们撒销：

	$ git reset --hard ORIG_HEAD

6.修复未提交文件中的错误(重置)

	如果你现在的工作目录(work tree)里搞的一团乱麻, 但是你现在还没有把它们提交; 你可以通过下面的命令, 让工作目录回到上次提交时的状态(last committed state):

	$ git reset --hard HEAD
	这条命令会把你工作目录中所有未提交的内容清空(当然这不包括未置于版控制下的文件 untracked files). 从另一种角度来说, 这会让"git diff" 和"git diff --cached"命令的显示法都变为空.

	如果你只是要恢复一个文件,如"hello.rb", 你就要使用 git checkout

	$ git checkout -- hello.rb
	这条命令把hello.rb从HEAD中签出并且把它恢复成未修改时的样子.
7.cherry pick up
	在sourcetrenn 的branch 1上进行修改修改，修改之后本地commit id1
	切换到branch2 上，在git文件树上选择branch1 上的commit id1 右击选择遴选即可
8.合并两个分支：
	首先在sourceTree上双击选中一个分支-1。
	单击将光标定位到另外一个分支上，在这个分支上右击就可以选择将分支-1merge到光标所在的分支。

1.添加元素：添加单个元素，如果不指定索引的话，元素将被添加到链表的最后.

public boolean add(Object element)
public boolean add(int index, Object element)
也可以把链表当初栈或者队列来处理:
public boolean addFirst(Object element)
public boolean addLast(Object element)
addLast()方法和不带索引的add()方法实现的效果一样.

2.使用链表实现一个stack:


import java.util.LinkedList;  
public class MainClass {  
  public static void main(String[] args) {  
    StackL stack = new StackL();  
    for (int i = 0; i < 10; i++)  
      stack.push(i);  
    System.out.println(stack.top());  
    System.out.println(stack.top());  
    System.out.println(stack.pop());  
    System.out.println(stack.pop());  
    System.out.println(stack.pop());  
  }  
}  
class StackL {  
  private LinkedList list = new LinkedList();  
  public void push(Object v) {  
    list.addFirst(v);  
  }  
  public Object top() {  
    return list.getFirst();  
  }  
  public Object pop() {  
    return list.removeFirst();  
  }  
}


3.使用链表实现一个queue:

import java.util.LinkedList;  
public class MainClass {  
  public static void main(String[] args) {  
    Queue queue = new Queue();  
    for (int i = 0; i < 10; i++)  
      queue.put(Integer.toString(i));  
    while (!queue.isEmpty())  
      System.out.println(queue.get());  
  }  
}  
class Queue {  
  private LinkedList list = new LinkedList();  
  public void put(Object v) {  
    list.addFirst(v);  
  }  
  public Object get() {  
    return list.removeLast();  
  }  
  public boolean isEmpty() {  
    return list.isEmpty();  
  }  
}

4.将一个链表转换成为一个数组（可以指定这个数组的大小或者不指定这个数组的大小）
import java.util.LinkedList;  
import java.util.List;  
public class Main {  
  public static void main(String[] args) {  
    List<String> theList = new LinkedList<String>();  
    theList.add("A");  
    theList.add("B");  
    theList.add("C");  
    theList.add("D");  
    String[] my = theList.toArray(new String[0]);  
    for (int i = 0; i < my.length; i++) {  
      System.out.println(my[i]);  
    }  
  }  
} 


import java.util.LinkedList;  
import java.util.List;  
public class Main {  
  public static void main(String[] args) {  
    List<String> theList = new LinkedList<String>();  
    theList.add("A");  
    theList.add("B");  
    theList.add("C");  
    theList.add("D");  
    String[] my = theList.toArray(new String[theList.size()]);  
    for (int i = 0; i < my.length; i++) {  
      System.out.println(my[i]);  
    }  
  }  
} 

5.它的循环方式：除了常用的 foreach  使用.size 的for  使用迭代   还有pollFirst PollLast  removeFirst removeLast

其中使用removeFirst()或removeLast()效率最高，其次是迭代和foreach而for循环get()效率最低，应避免使用这种方式进行。应当注意的是，使用pollFirst()或pollLast()或removeFirst()或removeLast()遍历时，会删除原始数据，若只单纯的读取，应当选用第一种或第三种方式。


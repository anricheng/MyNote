存在于：java.util.concurrent包之中；

线程池的重要性：

线程是一个程序员一定会涉及到的一个概念，但是线程的创建和切换都是代价比较大的。所以，我们有没有一个好的方案能做到线程的复用呢？这就涉及到一个概念——线程池。合理的使用线程池能够带来3个很明显的好处：
1.降低资源消耗：通过重用已经创建的线程来降低线程创建和销毁的消耗
2.提高响应速度：任务到达时不需要等待线程创建就可以立即执行。
3.提高线程的可管理性：线程池可以统一管理、分配、调优和监控。

作者：一只小哈
链接：http://www.jianshu.com/p/ade771d2c9c0
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

1.Executor
	1.1Exector 线程池的管理类的一个抽象层面的核心接口，将任务本身和任务执行进行了分离（意思就是说我们不用再一个 new Thread(new(RunnableTask())).start()的方式去启动一个Runnable）。
	这个接口只有一个execute方法；
	public interface Executor {
	    void execute(Runnable command);
	} 

	我们使用这个方法的时候可以同步也可以异步执行一个runnale:

	1.2同步的情况: 没有新创建一个线程而是在调用方所在的线程中直接运行 

    直接调用这个Runnabel的run方法(当然不使用这个接口是不行的);
	class DirectExecutor implements Executor {
     public void execute(Runnable r) {
         r.run();
     }}

     1.3异步的情况： 为每一个runnable对象创建一个新的线程；

     class ThreadPerTaskExecutor implements Executor {
     public void execute(Runnable r) {
         new Thread(r).start();
     }}

     1.4 许多 Executor 实现都对调度任务的方式和时间强加了某种限制。以下执行程序使任务提交与第二个执行程序保持连续，这说明了一个复合执行程序。

     class SerialExecutor implements Executor {
     final Queue<Runnable> tasks = new LinkedBlockingQueue<Runnable>();
     final Executor executor;
     Runnable active;

     SerialExecutor(Executor executor) {
         this.executor = executor;
     }

     public synchronized void execute(final Runnable r) {
         tasks.offer(new Runnable() {
             public void run() {
                 try {
                     r.run();
                 } finally {
                     scheduleNext();
                 }
             }
         });
         if (active == null) {
             scheduleNext();
         }
     }

     protected synchronized void scheduleNext() {
         if ((active = tasks.poll()) != null) {
             executor.execute(active);
         }
     }
 }


2.ExecutorService

    提供了两个管理终止的方法：当不再需要这个管理类的时候应该将其进行关闭，否则它会阻止整个JVM的虚拟机进行关闭;

    1.shutDown方法时线程池会停止接受新的任务，但会完成在pending中的任务。

    2.shutDownNow方法立即停止接受新的任务的同时也会终止在pendign中的任务。

	对Executor 的接口进行了扩展，但是也是一个接口，每次使用submit方法(这个方法时对Executor中de execute方法的扩展)提交一个task的时候可以返回一个Future对象。当调用这个Future对象的get方法时，可以阻塞当前线程直到Future对象所持有的线程执行完毕。

	它只有一个实现类ThreadPoolExecutor和间接实现类ScheduledThreadPoolExecutor。

	关于ExecutorService的创建:可以使用根据自己的需求利用实现类去创建也可以使用Excutors工具类来进行创建，

	ExecutorService executorService1 = Executors.newSingleThreadExecutor();  
	ExecutorService executorService2 = Executors.newFixedThreadPool(10);  
	ExecutorService executorService3 = Executors.newScheduledThreadPool(10);
    
    提供几个方法可以将自己的任务托付给ExecutorService:
	execute(Runnable)  
	submit(Runnable)  
	submit(Callable)  
	invokeAny(...)  
	invokeAll(...)

	分别介绍下这几个方法：
    -----execute方法：
	ExecutorService executorService = Executors.newSingleThreadExecutor();  

	executorService.execute(new Runnable() {  
	public void run() {  
	System.out.println("Asynchronous task");  
	}  
	});  

	executorService.shutdown();
	使用这种方法无法获取这个线程运行的结果：

	------submit方法: 这个可以提交Runnable跟Callable,其中Callnable 可以返回结果。

	Future future = executorService.submit(new Runnable() {  
	public void run() {  
	System.out.println("Asynchronous task");  
	}  
	});  
	//如果任务结束执行则返回 null  
	System.out.println("future.get()=" + future.get()); 

	submit(Callable)
	方法 submit(Callable) 和方法 submit(Runnable) 比较类似，但是区别则在于它们接收不同的参数类型。Callable 的实例与 Runnable 的实例很类似，但是 Callable 的 call() 方法可以返回壹個结果。方法 Runnable.run() 则不能返回结果  

	Future future = executorService.submit(new Callable(){  
    public Object call() throws Exception {  
        System.out.println("Asynchronous Callable");  
        return "Callable Result";  
    }  
    });  
  
System.out.println("future.get() = " + future.get()); 


1. newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
2. newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
3. newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。
4. newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照


  钩子函数：钩子 (hook) 方法

	此类提供 protected 可重写的 beforeExecute(java.lang.Thread, java.lang.Runnable) 
	和 afterExecute(java.lang.Runnable, java.lang.Throwable) 方法，这两种方法分别在执行每个任务之前和之后调用。
	它们可用于操纵执行环境；例如，重新初始化 ThreadLocal、搜集统计信息或添加日志条目。
	此外，还可以重写方法 terminated() 来执行 Executor 完全终止后需要完成的所有特殊处理。
	如果钩子 (hook) 或回调方法抛出异常，则ThreadPoolExecutor的所有线程将依次失败并突然终止。 
	队列维护
	方法 getQueue() 允许出于监控和调试目的而访问工作队列。强烈反对出于其他任何目的而使用此方法。
	remove(java.lang.Runnable) 和 purge() 这两种方法可用于在取消大量已排队任务时帮助进行存储回收。
	注意1:如果任务取消，ThreadPoolExecutor应该自己是可以进行存储回收的。
	取消的任务不会再次执行，但是它们可能在工作队列中累积，直到worker线程主动将其移除
	外部使用remove(java.lang.Runnable)和purge()可以把它们立即从队列中移除。

	
3.Executors 
	这就是一个创建线程池的工具类，用来创建单个或者多个线程池，便于开发人员利用线程池的特性去管理线程的生命周期。


	ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)

	几个参数的解释：
		
	1.当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。 
	2.当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行 
	3.当workQueue已满，且maximumPoolSize>corePoolSize时，新提交任务会创建新线程执行任务 
	4.当提交任务数超过maximumPoolSize时，新提交任务由RejectedExecutionHandler处理 
	5.当线程池中超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程 
	6.当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭 








Collection 是整个集合的抽象类，其中list因为有索引的原因增加了很多跟索引有关的方法，而set的中的方法时完全跟Collection一致的没有进行扩展；

---------------list ArrayList 数组  LinkedList双向链表   Vector线程安全-----------------

	List  有序的所以可以使用索引访问 可重复可多个null,所以不用要求存储的对象的class实现hashcode 方法;
		ArrayList 如果之前开辟的容量少于6个的话则直接开辟12个，多于6个的话直接double一下自己的容量，线程不安全
		Vector  跟ArrayList差不多，只是它是线程安全的
		LinkedList  同时实现了list 和 queue接口;

    ArrayList跟LinkedList的区别，在查找的时候ArrayList直接通过索引查找，所以它的时间复杂度是O(1),但是在增加一个元素的时候尤其是第一次添加一个元素的时候，根据下面这个公式它会直接增加12个容量的空间，之后每次容量不够的时候它都会直接使用使用它原来容量double之后的数据再重新new一个数组,并且将原来的数组copy到新的数组中； 在删除一个元素的时候，他同样是需要copy从被删除的元素开始到数组结束的元素向前面挪一个位置；

    Object[] newArray = new Object[s +(s < (MIN_CAPACITY_INCREMENT / 2) ?MIN_CAPACITY_INCREMENT : s >> 1)];

    但是LinkedList 是不需要进行增删的时候改变数组的大小或者进行数据的copy,所以它的增删时间复杂度是O(1)的，由于LinkedList的查找不能通过索引而是必须通过链表进行遍历，所以查询的时候它的时间复杂度最坏是O(n)，同时由于它的每个节点除了存储自己的信息之外，还需要存储它的上一个和下一个节点的信息，所以它需要耗费更多的空间。

--------------------Set  hashset无序  LinkedHashSet有序  TreeSet排序------------------
    HashSet是按照hash算法来存取集合中的对象的，所以对象放入的位置跟我们存进去的顺序是无关的，但是一旦放进去之后就有一个确定的顺序，这样我们之后迭代的时候才知道去哪里取数据，并且多次迭代输出的顺序是一致的，只是跟我们存进去的顺序是不一致的；

    无序的 只能通过对象的引用进行对象的访问 不可重复最多一个null  使用hash值达到不重复,所以set中存储的元素必须实现hashcode方法
    并且它的实现是通过HashMap,不过它是只用HashMap的key值而不使用value，这个value都统一设置成这个set对象本身;而且它没有list中有get方法,这个无序是指它的存入的时候跟取出的时候顺序是不一致的，但是一旦存进去之后不管取多少次，它取出的数据每次的顺序是一致的；
		HashSet  
		LinkedHashSet 它是有序的，可以按照插入的顺序存放，由于实现了hashcode方法，所以它也是不可重复的；
		TreeSet  实现了sortedSet的接口，将插入的元素按序排放，所以存入它的元素是按照一定的规则进行排序的；
	Queue
		

--------------------Map  hashmap无序  Linkedhashmap 有序  TreeMap 排序 ConcurrentHashMap线程安全-------------------


	hashMap  与hashTable的区别：  hashMap要求key 值是唯一的允许为null,但是只能有一个,但是hashTable是不允许有空值的；
    hashTable  定义键的类必须实现hashcode()方法和equal()方法
	weakhashMap    WeakHashMap是一种改进的hashmap，他对key进行弱引用，如果一个key不再被外部引用，则被gc回收
	TreeMap  实现了sortedmap接口，所以存储进去的key值是按照一定的顺序排列的；
    LinkedHashMap  
    LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。

     ConcurrentHashMap是Java 5中支持高并发、高吞吐量的线程安全HashMap实现。允许多个修改操作并发进行，其关键在于使用了锁分离技术。

    总结：     当元素的顺序很重要时选用TreeMap，当元素不必以特定的顺序进行存储时，使用HashMap。Hashtable的使用不被推荐，因为HashMap提供了所有类似的功能，并且速度更快。当你需要在多线程环境下使用时，HashMap也可以转换为同步的。

---------------------Properties--------------

 一般是把属性文件读入流中后，以键-值对的形式进行保存，以方便读取其中的数据。 
		
Map.Entry  它是Map中的一个静态的内部接口，好处是它可以访问外部私有方法和属性；

Iterator
	ListIterator 这个是list所特有的一个迭代器，好处是可以先hasnext 之后再hasprevious.
Enumeration 最早的输出的接口,现在已经不用；

关于queue  和 stack, queue是一个接口，它有一个实现类就是LinkedList  stack是一个具体的实现类，它集成自Vector

　　1.heap是堆，stack是栈。

　　2.stack的空间由操作系统自动分配和释放，heap的空间是手动申请和释放的，heap常用new关键字来分配。

　　3.stack空间有限，heap的空间是很大的自由区。


 若只是声明一个对象，则先在栈内存中为其分配地址空间，

 若再new一下，实例化它，则在堆内存中为其分配地址。



总结：

1.collection接口：
       @Override
        public boolean contains(Object o) {
            return false;
        }

        @Override
        public Iterator<Integer> iterator() {
            return null;
        }

        @Override
        public Object[] toArray() {
            return new Object[0];
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return null;
        }


        @Override
        public boolean containsAll(Collection<?> c) {
            return false;
        }

        @Override
        public boolean addAll(Collection<? extends Integer> c) {
            return false;
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return false;
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return false;
        }

        @Override
        public void clear() {
        }
注意 ：
1.al.retainAll(al1)相当于求交集然后放在al中；
2.两种方法将一个集合转变为数组：
	Integer []array1=al.toArray(new Integer[]{})通过泛型指定了数组的类型
	Object []array2=al.toArray()返回的是Object[],需要进行类型转换
3.LinkedList同时实现了List和Queue接口，就是一个链表的封装:
   LinkedList<String> ll=new LinkedList<String>();
    ll.add("eq");
    ll.add("eq1");
    ll.add("eq2");
    ll.add("eq3");
    ll.addFirst("23");
    ll.addLast("233");
    System.out.println(ll);
其中：Queue接口

element找到头 offer在队列尾加元素
peek找到头
poll找到头并删除
remove删除头


4.List接口

可以重复 ，可以认为是一个数组，可以通过索引取出数据 
List对于Collection有很大的扩充 新增包括

指定位置增加数据
指定位置增加一组数据
取得指定位置数据
在指定位置删除数据
subList(from,to)返回子Listal1=al.subList(0,1); 等数据的顺序与插入顺序一样

5.Set

其中的方法与Collection的完全一样

顺序与插入的顺序无关
不重复的，如果重复插入会忽略
TreeSet

数据是排序的！！，实际上也是SortedSet的一个子类
HashSet

数据散列存放
TreeSet自动排序原理

要排序必须可比较，因此TreeSet指定的类必须实现了Comparable方法

判断重复元素的原理

使用equals和hashCode方法来判断 首先判断hashCoede是否一样，不相同则为不同元素，相同则调用equals()来最终决定，因此将元素加入Set的的时候最好复写这两个方法

对象相等->hashcode一定相等
hashCode相等->对象不一定相等
SortedSet接口

是自动排序的 方法

返回首尾元素
返回任意一段子SortedSet headSet/tailSet/subSet
Iterator接口

Collection的输出方式：
如果你是List的话：有iterator  listiterator foreach for+length+get(index) enumeration 共五种
如果你是set的话:iterator  foreach enumeration 共三种

Iterator
ListIterator
foreach
Enumeration
集合的输出最好一定是用Iterator接口
Iterator是迭代输出接口
通过Collection.iterator()实例化
hasnext()判断是否有内容，并且移动指针
在使用迭代输出的时候，不要使用集合类的remove方法，而是要用iterator的remove方法，尽量不要再输出时删除
单向操作

比较的list:

(1)HashMap和Hashtable ( 注意table是小写的t)：

首先来看HashMap和HashTable，这两兄弟经常被放到一起来比较，那么它们有什么不一样呢？

a.HashMap不是线程安全的；HashTable是线程安全的，其线程安全是通过Sychronize实现。

b.由于上述原因，HashMap效率高于HashTable。

c.HashMap的键可以为null，HashTable不可以。

d.多线程环境下，通常也不是用HashTable，因为效率低。HashMap配合Collections工具类使用实现线程安全。同时还有ConcurrentHashMap可以选择，该类的线程安全是通过Lock的方式实现的，所以效率高于Hashtable。

e.HashMap的扩容代价非常大，要生成一个新的桶数组，然后要把所有元素都重新Hash落桶一次，几乎等于重新执行了一次所有元素的put。所以如果我们对Map的大小有一个范围的话，可以在构造时给定大小，一般大小设置为：(int) ((float) expectedSize / 0.75F + 1.0F)。

f.key的设计尽量简洁。

(2)数组 链表 哈希表之间的区别：

数组，链表，哈希表。各有优劣，顺便提一下，数组连续内存空间，查找速度快，增删慢；链表充分利用了内存，存储空间是不连续的，首尾存储上下一个节点的信息，所以寻址麻烦，查找速度慢，但是增删快；哈希表呢，综合了它们两个的有点，一个哈希表，由数组和链表组成。假设一条链表有1000个节点，现在查找最后一个节点，就得从第一个遍历到最后一个；如果用哈希表，将这条链表分为10组，用一个容量为10数组来存储这10组链表的头结点（a[0] = 0 , a[1] = 100 , a[2] = 200 …）。这样寻址就快了。

（3）什么是hash碰撞？

Hash碰撞，不同的key根据hash算法算出的值可能一样，如果一样就是所谓的碰撞。

(4)遍历一个HashTable的方式？

   第一种方法是 使用foreach方法去循环遍历 keyset 或者entryset;
   第二种方法是 使用keyset或者entryset的迭代器;

      //遍历方式一:for each遍历HashMap的entryset，注意这种方式在定义的时候就必须写成
        //Map<Integer , String> hs，不能写成Map hs;
        for(Entry<Integer , String> entry : hs.entrySet()){
            System.out.println("key:"+entry.getKey()+"  value:"+entry.getValue());
        }
        //遍历方式二：使用EntrySet的Iterator
        Iterator<Map.Entry<Integer , String>> iterator = hs.entrySet().iterator();
        while(iterator.hasNext()){
            Entry<Integer , String> entry =  iterator.next();
            System.out.println("key:"+entry.getKey()+"  value:"+entry.getValue());
        };
        //遍历方式三：for each直接使用HashMap的keyset
        for(Integer key : hs.keySet()){
            System.out.println("key:"+key+"  value:"+hs.get(key));
        };
        //遍历方式四：使用keyset的Iterator
        Iterator keyIterator = hs.keySet().iterator();
        while(keyIterator.hasNext()){
            Integer key = (Integer)keyIterator.next();
            System.out.println("key:"+key+"  value:"+hs.get(key));
        }  

(5)使用keyset的两种方式都会遍历两次，所以效率没有使用EntrySet高。

   HashMap输出是无序的，这个无序不是说每次遍历的结果顺序不一样，而是说与插入顺序不一样。 



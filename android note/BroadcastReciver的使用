1.广播的scenario:在android系统中，广播体现在方方面面，例如当开机完成后系统会产生一条广播，接收到这条广播就能实现开机启动服务的功能；当网络状态改变时系统会产生一条广播，接收到这条广播就能及时地做出提示和保存数据等操作；当电池电量改变时，系统会产生一条广播，接收到这条广播就能在电量低时告知用户及时保存进度.....

2.创建一个broadcastReciver

  
public class MyReceiver extends BroadcastReceiver {  
      
    private static final String TAG = "MyReceiver";  
      
    @Override  
    public void onReceive(Context context, Intent intent) {  
        String msg = intent.getStringExtra("msg");  
        Log.i(TAG, msg);  
    }  
  
} 

在onReceive方法内，我们可以获取随广播而来的Intent中的数据，这非常重要，就像无线电一样，包含很多有用的信息。

3.注册一个广播：
  静态注册：这种注册的方式是长驻类型的 即使app被关闭的话 有广播传递过来也能接受得到
  <receiver android:name=".MyReceiver">  
            <intent-filter>  
                <action android:name="android.intent.action.MY_BROADCAST"/>  
                <category android:name="android.intent.category.DEFAULT" />  
            </intent-filter>  
        </receiver>  
  动态注册：

  MyReceiver receiver = new MyReceiver();  
          
  IntentFilter filter = new IntentFilter();  
  filter.addAction("android.intent.action.MY_BROADCAST");  
          
  registerReceiver(receiver, filter); 
  需要在activity 销毁的同时销毁这个广播：
  @Override  
protected void onDestroy() {  
    super.onDestroy();  
    unregisterReceiver(receiver);  
} 

4.如何去发送一个广播：
public void send(View view) {  
    Intent intent = new Intent("android.intent.action.MY_BROADCAST");  
    intent.putExtra("msg", "hello receiver.");  
    sendBroadcast(intent);  
}

5.有序广播和无序广播：
普通的广播就是无序的广播，针对所有的接收者来说完全是异步的，并且是不能终止的；

有序的广播：
  第一：
  需要在发送广播的时候指定相应的参数并且调用的是sendOrderedBroadcast这个API：     
  sendOrderedBroadcast(intent, "scott.permission.MY_BROADCAST_PERMISSION"); 
  注意，使用sendOrderedBroadcast方法发送有序广播时，需要一个权限参数，如果为null则表示不要求接收者声明指定的权限，如果不为null，则表示接收者若要接收此广播，需声明指定权限。这样做是从安全角度考虑的，例如系统的短信就是有序广播的形式，一个应用可能是具有拦截垃圾短信的功能，当短信到来时它可以先接受到短信广播，必要时终止广播传递，这样的软件就必须声明接收短信的权限。
  第二：
  所以我们在AndroidMainfest.xml中定义一个权限：
<permission android:protectionLevel="normal" android:name="scott.permission.MY_BROADCAST_PERMISSION" /> 
并且去使用这个权限；<use permission ="~~~"/>


第三：需要在manifest文件中声明各个revicer的优先级：
<receiver android:name=".FirstReceiver">  
    <intent-filter android:priority="1000">  
        <action android:name="android.intent.action.MY_BROADCAST"/>  
        <category android:name="android.intent.category.DEFAULT" />  
    </intent-filter>  
</receiver>  
<receiver android:name=".SecondReceiver">  
    <intent-filter android:priority="999">  
        <action android:name="android.intent.action.MY_BROADCAST"/>  
        <category android:name="android.intent.category.DEFAULT" />  
    </intent-filter>  
</receiver>  
<receiver android:name=".ThirdReceiver">  
    <intent-filter android:priority="998">  
        <action android:name="android.intent.action.MY_BROADCAST"/>  
        <category android:name="android.intent.category.DEFAULT" />  
    </intent-filter>  
</receiver>  

也即是在intent-filter 之中增加一个属性参数：  priority 这个值越大代表优先级越大；

第四： 需要在各个reciver 中一次将接收到的信息  通过bundle重新包装后setResult的方式依次往下传递：
 Bundle bundle = new Bundle();  
        bundle.putString("msg", msg + "@SecondReceiver");  
        setResultExtras(bundle);

 或者到了某个接收者的时候这个接收者可以直接将这个广播给absort

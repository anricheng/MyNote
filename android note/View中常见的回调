1. 构造方法

1.public View(Context context)
2.public View(Context context, @Nullable AttributeSet attrs)
3.public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr)
4.public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes)
构造方法严格来说不算回调，但除了方法一外都不需要我们手动调用，而且是自定义View仅有的必须要声明的方法。
构造方法1：当不在布局文件中声明而在代码中创建View时调用的方法
构造方法2：当在布局文件中声明，且没有在styles.xml中预设主题级或item级的默认属性时调用。attrs就是一组布局文件中的值（包括默认属性和自定义属性）
构造方法3：当在布局文件中声明，在attrs.xml中有声明一个属性，并在styles.xml中的主题item声明这个属性的值（即View的一组默认属性）调用
构造方法4：当在布局文件中声明，在styles.xml中的主题里没有声明但单独声明了View的一组默认属性时调用。
注意点：
属性赋值优先级：Xml定义 （方法二）> Xml的style定义（方法二） > defStyleAttr （方法三）> defStyleRes> theme直接定义（方法四）
构造方法四要求api21以上，所以我们一般采用构造方法二（没有默认属性）或构造方法三（有默认属性）

2. void onFinishInflate()；

当系统解析XML中声明的View后回调此方法，调用顺序：内层View->外层View,如果是viewgroup,适合在这里获取子View。
注意点：
如果View没有在XML中声明而是直接在代码中构造的，则不会回调此方法
此时无法获取到View的宽高和位置

3. void onAttachedToWindow()；

当view 被添加到window中回调，调用顺序：外层View->内层View。在XML中声明或在代码中构造，并调用addview（this view）方法都会回调该方法。
注意点：
此时View仅仅被添加到View，而没有开始绘制所以同样获取不到宽高和位置

4. void onDetachedFromWindow()；

看名字就知道是与void onAttachedToWindow()；对应的方法，在VIew从Window中移除时回调，如执行removeView（）方法。
注意点：
如果一个View从window中被移除了，那么其内层View（如果有）也会被一起移除，都会回调该方法，且会先回调内层View的onDetachedFromWindow()方法。

5. void onWindowFocusChanged(boolean hasWindowFocus)；

当View所在的Window获得或失去焦点时被回调此方法。除了常见的设置view的onGlobalLayoutListener，也可以通过这个方法取到VIew的宽高和位置；也适合在判断当失去焦点时停止一些工作，如图片轮播，动画执行等，当获取到焦点后继续执行。
hasWindowFocus：View所在Window是否获取到焦点,当该Window获得焦点时，hasWindowFocus等于true，否则等于false。

6. boolean onTouchEvent(MotionEvent event)；

当手指触摸View的时候回调该方法，前提是触摸事件没有被拦截或者被子View消费掉。该方法是事件分发流程中最后的消费者。
event：触摸事件对象，包含了该事件的所有信息，如触摸的类型（down、move、up），触摸位置等。
返回值:true：事件被消费了，false：没有被消费，事件传递到外层View，super方法：同false。

作者：大头呆
链接：http://www.jianshu.com/p/0faa47bc31d9
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
1.相对布局中常使用的属性：
android:layout_above 将该控件的底部至于给定ID的控件之上
android:layout_below 将该控件的顶部至于给定ID的控件之下
android:layout_toLeftOf 将该控件的右边缘和给定ID的控件的左边缘对齐
android:layout_toRightOf 将该控件的左边缘和给定ID的控件的右边缘对齐

android:layout_alignBaseline 该控件的baseline和给定ID的控件的baseline对齐
android:layout_alignBottom 将该控件的底部边缘与给定ID控件的底部边缘对齐
android:layout_alignLeft 将该控件的左边缘与给定ID控件的左边缘对齐
android:layout_alignRight 将该控件的右边缘与给定ID控件的右边缘对齐
android:layout_alignTop 将给定控件的顶部边缘与给定ID控件的顶部对齐


android:alignParentBottom 如果该值为true，则将该控件的底部和父控件的底部对齐
android:layout_alignParentLeft 如果该值为true，则将该控件的左边与父控件的左边对齐
android:layout_alignParentRight 如果该值为true，则将该控件的右边与父控件的右边对齐
android:layout_alignParentTop 如果该值为true，则将空间的顶部与父控件的顶部对齐

android:layout_centerHorizontal 如果值为真，该控件将被至于水平方向的中央
android:layout_centerInParent 如果值为真，该控件将被至于父控件水平方向和垂直方向的中央
android:layout_centerVertical 如果值为真，该控件将被至于垂直方向的中央


扩展知识：

EditText的android:hint 

设置EditText为空时输入框内的提示信息。 

android:gravity　 
android:gravity属性是对该view 内容的限定．比如一个button 上面的text.  你可以设置该text 在view的靠左，靠右等位置．以button为例，android:gravity="right"则button上面的文字靠右 

android:layout_gravity 
android:layout_gravity是用来设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为例，android:layout_gravity="right"则button靠右 

android:layout_alignParentRight 
使当前控件的右端和父控件的右端对齐。这里属性值只能为true或false，默认false。 

android:scaleType： 
android:scaleType是控制图片如何resized/moved来匹对ImageView的size。ImageView.ScaleType / android:scaleType值的意义区别： 

CENTER /center  按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示 

CENTER_CROP / centerCrop  按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽) 

CENTER_INSIDE / centerInside  将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽 

FIT_CENTER / fitCenter  把图片按比例扩大/缩小到View的宽度，居中显示 

FIT_END / fitEnd   把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置 

FIT_START / fitStart  把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置 

FIT_XY / fitXY  把图片不按比例扩大/缩小到View的大小显示 

MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。 

要注意一点，Drawable文件夹里面的图片命名是不能大写的。



关于图片的布局：
1.android:scaleType=”center” 
保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size，超过部分裁剪处理。

2.android:scaleType=”centerCrop” 
以填满整个ImageView为目的，将原图的中心对准ImageView的中心，等比例放大原图，直到填满ImageView为止（指的是ImageView的宽和高都要填满），原图超过ImageView的部分作裁剪处理。

3.android:scaleType=”centerInside” 
以原图完全显示为目的，将图片的内容完整居中显示，通过按比例缩小原图的size宽(高)等于或小于ImageView的宽(高)。如果原图的size本身就小于ImageView的size，则原图的size不作任何处理，居中显示在ImageView。

4.android:scaleType=”matrix” 
不改变原图的大小，从ImageView的左上角开始绘制原图，原图超过ImageView的部分作裁剪处理。

5.android:scaleType=”fitCenter” 
把原图按比例扩大或缩小到ImageView的ImageView的高度，居中显示

6.android:scaleType=”fitEnd” 
把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的下部分位置

7.android:scaleType=”fitStart” 
把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的上部分位置

8.android:scaleType=”fitXY” 
把原图按照指定的大小在View中显示，拉伸显示图片，不保持原比例，填满ImageView.


补充： 常用的布局小技巧：

1.分割线在app经常会用到的，使用频率高到让你惊讶。但是LinearLayout有一个属性可以帮你添加分割线。下面的例子中，LinearLayout包含2个TextView和基于他们中间的分割线。

	使用到的方法：
	1.Create divider shape(创建shape)

	下面是一个简单的shape divider_horizontal.xml用来当做分割线。

		<?xml version="1.0" encoding="utf-8"?>
		<shape xmlns:android="http://schemas.android.com/apk/res/android">

		<size android:width="@dimen/divider_width"/>
		<solid android:color="@color/colorPrimaryDark"/>

		</shape>
	2.Add shape to LinearLayout

<LinearLayout android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:orientation="horizontal"
              android:background="@android:color/white"
              android:divider="@drawable/divider_horizontal"  //添加分割线
              android:dividerPadding="5dp" //设置padding
              android:showDividers="middle">//居中显示


    <TextView android:layout_width="0dp"
              android:layout_weight="0.5"
              android:layout_height="wrap_content"
              android:gravity="center"
              style="@style/Text.Title"
              android:text="@string/batman_name"/>

    <TextView android:layout_width="0dp"
              android:layout_height="wrap_content"
              android:layout_weight="0.5"
              android:gravity="center"
              style="@style/Text.Title"
              android:text="@string/superman_name"/>

</LinearLayout>

2.ImageView has src and background attribute

同时使用ImageView的src和background属性实现点击效果

3.使用space在两个空间之间来增加间距：
<TextView android:layout_width="match_parent"
          android:layout_height="wrap_content"
          style="@style/Text.Title"

<Space android:layout_width="match_parent"
       android:layout_height="10dp"/>//添加间距

<TextView android:layout_width="match_parent"
          android:layout_height="wrap_content"
          android:text="@string/gotham_city_description"
          style="@style/Text.Details"/>

4.使用include 和 merge标签来增加使用

5.在listview 中拥有一个这样的布局：  左边是一个icon  右边是两行文字：
 如果使用LinearLayout 再套一个 LinearLayout的方式比较容易实现：

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="fill_parent"
  android:layout_height="?android:attr/listPreferredItemHeight"
  android:padding="6dip">
  <ImageView
    android:id="@+id/icon"
    android:layout_width="wrap_content"
    android:layout_height="fill_parent"
    android:layout_marginRight="6dip"
    android:src="@drawable/icon" />
  <LinearLayout
    android:orientation="vertical"
    android:layout_width="0dip"
    android:layout_weight="1"
    android:layout_height="fill_parent">
    <TextView
      android:layout_width="fill_parent"
      android:layout_height="0dip"------------这样做的好处是如果这两个textView其中有个一
      android:layout_weight="1"--------消失的话，另外一个都会填充整个的布局；
      android:gravity="center_vertical"
      android:text="My Application" />
    <TextView
      android:layout_width="fill_parent"
      android:layout_height="0dip"
      android:layout_weight="1"---------------
      android:singleLine="true"
      android:ellipsize="marquee"
      android:text="Simple application that shows how to use RelativeLayout" />
    </LinearLayout>
</LinearLayout>


当使用 RelativeLayout的时候如果两个textView其中一个丢失的话，那么另外一个无法填充整个的布局。

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="fill_parent"
  android:layout_height="?android:attr/listPreferredItemHeight"
  android:padding="6dip">
  <ImageView
    android:id="@+id/icon"
    android:layout_width="wrap_content"
    android:layout_height="fill_parent"
    android:layout_alignParentTop="true"
    android:layout_alignParentBottom="true"
    android:layout_marginRight="6dip"
    android:src="@drawable/icon" />
<TextView
    android:id="@+id/secondLine"
    android:layout_width="fill_parent"
    android:layout_height="26dip"
    android:layout_toRightOf="@id/icon"
    android:layout_alignParentBottom="true"
    android:layout_alignParentRight="true"
    android:singleLine="true"
    android:ellipsize="marquee"
    android:text="Simple application that shows how to use RelativeLayout" />
  <TextView
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_toRightOf="@id/icon"
    android:layout_alignParentRight="true"
    android:layout_alignParentTop="true"
    android:layout_above="@id/secondLine"
    android:layout_alignWithParentIfMissing="true"
    android:gravity="center_vertical"
    android:text="My Application" />
</RelativeLayout>

在RelativeLayout里，每个View都是和父元素RelativeLayout对齐或是和其它View对齐的。例如，我们声明描述部分是和RelativeLayout的底部对齐，标题位于其上并与RelativeLayout的顶端对齐。当描述GONE时，RelativeLayout不知道怎么去放置标题的底边缘。为了解决这个问题，你可以使用一个非常简单的布局参数：layout_alignWithParentIfMissing。


==========================Material Design=====================================

一、关于Material Design
从Android5.0开始引入的，是一种全新的设计语言（翻译为“原材料设计”），其实是谷歌提倡的一种设计风格、理念、原则。
拟物设计和扁平化设计一种结合体验。还吸取了最新一些科技理念。
层次感：View Z轴

1.对于美工：遵循MD的界面设计、图标合集。
2.对于产品经理：遵循MD界面设计、页面的跳转及动画效果、交互设计。
3.对于开发人员：参与原型设计、辅助美工原型设计的素材准备。
		开发实现MD的设计----界面、动画、转场动画等等。


二、MD的使用及开发
	谷歌开放以及收集了一些最新的开源的项目(很多是自己开发的)，汇集到最新的support兼容支持包以及最新的5.X API里面。
	（preference：设置页面，可以通过配置文件达到界面设计的效果。）
	1）android-support-v4:最低兼容到Android 1.6系统，里面有类似ViewPager等控件。
	2）android-support-v7:appcompat、CardView、gridlayout、mediarouter、
	palette、preference、recyclerView(最低兼容到3.0) 
	最低兼容到Android 2.1的系统，这个工程可以让开发人员统一开发标准，在任何的系统版本下保证兼容性。
	（比如：Theme,value,布局，新的控件，新的动画特效实现）
	所以现在ADT、AndrodStudio一般都会直接创建项目的时候就直接帮你新建或者引入了一个叫做appcompat的项目。
	（这里可能会碰到很多问题：1.自动导入的appcompat-v7项目自身就是报错的，什么原因？build的版本太低了,要么是SDK很新但是兼容包没有更新。
					(还有的有其他的原因：1.没有将依赖的项目作为library，而且也没有将自己的项目加入该依赖项目。
					  2.multiple dex files。。。。appcompat/res/com.android.v7.R$anim 有文件冲突--一般是代表jar包冲突。
					  如何解决？删掉重复的jar )
				  2.appcompat-v7好不容易没报错，但是项目报错，一看控制台：报appcompat里面的某个res/values/theme/xxx属性不存在 等等问题。
				  什么原因？因为你引入的是很新的appcompat-v7项目，它要求必须很高的版本编译，然而Eclipse很蛋疼，在引入该项目的主项目编译的时候也必须要达到这个很高的版本---直接使用最高版本编译）


现在一般做开发都是最低兼容到4.0。
SDK升级：API升级、兼容包的升级、工具升级。
版本：1.compileSDK 编译版本；
	2.minSDK 兼容到最低版本是多少
	3.targetSDK;

SDK更新的历史上几个特别重要的版本：14（4.0）、19（4.4）、21（5.0）

关于Eclipse项目如何导入到AndroidStudio。百度。
1.直接导入没问题；
2.有问题，导出项目的时候应该选择gradle模式导出, 再导入到as。（这种情况下都有可能还是报错，可能是gradle版本太低了 需要升级！）
3.直接在as里面建个项目，然后把所有的资源和代码拷贝过去 就欧了！！



--------------------------1.MaterialDesign控制项目全局样式-------------------------------
为什么要用appcompat项目，因为里面是谷歌精心准备的---解决android碎片化开发蛋疼的问题，让我们app编译出来在
各种高低版本之间、不同的厂商生产的ROM之间显示出来的效果UI控件等有一较一致的体验。


1.引入appcompat-v7项目（包括了android-support-v7-appcompat.jar和资源文件）
2.写自己的全局样式：
	<!--
		Base application theme, dependent on API level. This theme is replaced
		by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
	 -->
    <style name="AppBaseTheme" parent="Theme.AppCompat.Light">
        <!--
            Theme customizations available in newer API levels can go in
            res/values-vXX/styles.xml, while customizations related to
            backward-compatibility can go here.
        -->
    </style>

    <!-- Application theme. -->
    <style name="AppTheme" parent="AppBaseTheme">
        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
        <item name="android:textColor">@color/mytextcolor</item>
        <item name="colorPrimary">@color/colorPrimary_pink</item>
        <item name="colorPrimaryDark">@color/colorPrimary_pinkDark</item>
        <item name="android:windowBackground">@color/background</item>
	<item name="colorAccent">@color/accent_material_dark</item>
	 <!-- 设置虚拟导航栏背景颜色 -->
        <item name="android:navigationBarColor">@color/colorPrimary_pink</item>
    </style>
	colorPrimary：主色，
	colorPrimaryDark：主色--深色，一般可以用于状态栏颜色、底部导航栏
	colorAccent：（代表各个控件的基调颜色--CheckBox、RadioButton、ProgressBar等等）
	"android:textColor"：当前所有的文本颜色

----------------------------MaterialDesign兼容性控件的使用------------------------------------
尤其是在appcompat-V7里面有很多为兼容而生的控件
这样就可以做到高低版本和不同的ROM之间体验一致！还可以配合appcompat的主题使用达到体验一致性
1.android.support.v7.app.AlertDialog

2.进度条样式设置
 style="@style/Widget.AppCompat.ProgressBar.Horizontal"

3.SwipeRefreshLayout下拉刷新

4.PopupWindow
	ListPopupWindow
	PopupMenu

5.android.support.v7.widget.LinearLayoutCompat 
给包裹在里面的所有子控件添加间隔线
        <android.support.v7.widget.LinearLayoutCompat
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:divider="@drawable/abc_list_divider_mtrl_alpha"
            app:showDividers="beginning|middle"
            android:orientation="vertical" >


-----------------------------V7 RecyclerView-----------------------------------
特点：
1.谷歌在高级版本提出一个新的替代ListView、GridView的控件。
2.高度解耦。
3.自带了性能优化。ViewHolder。
软件：低耦合高内聚。

RecyclerView没有条目点击事件，需要自己写。


作业：
1.封装一个简单的BaseRecyclerAdapter。
2.解决position可能错位的问题。
3.设置条目长按事件



作业：
1.看源码LinearLayoutCompat ，分析实现的原理:是如何做到给里面的所有的child之间添加间隔线的？
	
	View的绘制会经过三个方法：onMearsue（测量自身和里面的所有子控件）,onLayout（摆放里面所有的子控件）,onDraw（绘制）
	猜想：1）mearsuredWidth,mearsuredHeight会变大（加上间隔线）；2）摆放子控件位置会有一定的体现（childView: left/top/right/bottom）；
		3)onDraw绘制的时候也会有提现（childView: left/top/right/bottom）；



2.解决本次课的瀑布流效果的bug
报错：NullPointException----LayoutParams为空

View.inflate(viewGroup.getContext(), android.R.layout.simple_list_item_1, null)
最终都会调用该方法：
inflate(resource, root, root != null);
inflate(resource, null, false);

经过修改：
MyViewHolder holder = new MyViewHolder(View.inflate(viewGroup.getContext(), android.R.layout.simple_list_item_1, viewGroup));
还是报错：
java.lang.IllegalStateException: 
The specified child already has a parent. You must call removeView() on the child's parent first.
默认还是调用的：
inflate(resource, root, root != null);
inflate(resource, root, true);
看源码就知道：多做了一个事情就是
 if (root != null && attachToRoot) {
                        root.addView(temp, params);
                    }

由于RecyclerView/ListView会自动将child添加到它里面去

为何Fragment的onCreateView又可以呢？


最终结局办法：
首先，root不为null, boolean(attachToRoot)必须为false。
inflate(resource, root, false);

------------------------RecyclerView设置分割线---------------------------
1.RecyclerView没有默认的分割线，需要自己绘制。
RecyclerView.ItemDecoration
	1)线性的分割线
	2）网格的分割线

1）.可以通过修改Theme.Appcompa主题样式里面的android:listSelector或者 android:listDivider属性
	达到改变间隔线的大小和颜色哦！（自己尝试下）
		    <style name="AppTheme" parent="AppBaseTheme">
			<item name="android:listDivider">@drawable/item_divider</item>
		    </style>
	2）.写一个条目装饰类，继承
	class MyItemDecoration extends RecyclerView.ItemDecoration{
	}

绘制分发。
	绘制REcyclerView的时候会分发Canvas到ItemDecoration里面。

作业：
	1。现在DividerGridViewItemDecoration还有不完善的吗？
	效果上面
	2。看ItemDecoration的绘制分发的过程源码粗略分析


------------------------RecyclerView 如何添加头部和底部---------------------------
ListView.addHeadView();
ListView.addFooterView();

RecyclerView没有这样的方法，需要自己解决
所以我们通过看ListView的源码学习如何解决这个问题！！

ListView.addHeaderView(){
	 if (mAdapter != null) {
            if (!(mAdapter instanceof HeaderViewListAdapter)) {
                mAdapter = new HeaderViewListAdapter(mHeaderViewInfos, mFooterViewInfos, mAdapter);
            }
};
ListView.setAdapter(){
	if (mHeaderViewInfos.size() > 0|| mFooterViewInfos.size() > 0) {
            mAdapter = new HeaderViewListAdapter(mHeaderViewInfos, mFooterViewInfos, adapter);
        } else {
            mAdapter = adapter;
        }
}

ListView.setAdapter(new SimpleAdapter(xxx))

使用了中间代理模式解决的。模仿！！

注意：刷新问题
				//注意：如果添加了头部的话，这样刷新是没有效果的
//				adapter.notifyDataSetChanged();
				//需要拿到真正的adapter（因为我们自定义REcyclerView里面是包装了一层新的adapter）
//				recyclerView.getAdapter().notifyDataSetChanged();
				//这里还要注意position的问题，因为header也是属于条目的一部分，所以position都要往下移1位才行
				recyclerView.getAdapter().notifyItemInserted(1);



作业:
	1.思考，如何实现更多条目的装饰效果，比如：联系人条目的左侧添加首字母装饰。

-------------------------------RecyclerView交互动画---------------------------------------------------------
ItemTouchHelper







作业：1.解决课上的bug：滑动删除的时候，然后再滑动页面，结果有的条目不出现了 有空白的地方。
	原因：ListView和RecyclerView都会有复用条目itemView。这样就会导致上面的问题。
	解决：很多。比如在clearView回调方法里面去恢复这些条目的状态
	@Override
	public void clearView(RecyclerView recyclerView, ViewHolder viewHolder) {
		// 恢复
		viewHolder.itemView.setBackgroundColor(Color.WHITE);
		
//		viewHolder.itemView.setAlpha(1);//1~0
//		viewHolder.itemView.setScaleX(1);//1~0
//		viewHolder.itemView.setScaleY(1);//1~0
		super.clearView(recyclerView, viewHolder);
	}


2.类似QQ的条目侧滑一半的效果
提示：
	方法一：判断
	//判断是否超出或者达到width/2，就让其setTranslationX位一般的位置
		if(Math.abs(dX)<=viewHolder.itemView.getWidth()/2){
			viewHolder.itemView.setTranslationX(-0.5f*viewHolder.itemView.getWidth());
		}else{
			viewHolder.itemView.setTranslationX(dX);
		}
	方法二：ItemView就是一个ViewPager，上面的view可以朝反方向设置TranslationX


-------------------------------------MateriaDesign侧滑----------------------------------------------
以前是有民间的效果：SliddingMenu

侧滑两种效果：1.盖在整个页面上面；2.在Toolbar下面。
在MD提出来以后，谷歌就收录并改变了很多开源项目，放到API及support包里面。
1.DrawerLayout 抽屉容器
	来自support-v4包里面的。（android.support.v4.widget）
	相当于一个自定义容器 extends ViewGroup ,可以看出是一个有侧滑效果的帧布局
	两个部分：1）内容布局；2）侧滑出来的菜单布局


	

2.NavigationView
	是谷歌在侧滑的MaterialDesign的一种规范，所以提出了一个新的控件，用来规范侧滑的基本样式。
DrawerLayout+ NavigationView结合使用

注意：使用NavigationView，需要依赖项目：Design项目。
	同时还需要依赖recyclerView项目和CardView项目！！！！


	

作业：
1.实现侧滑效果，点击菜单实现fragment切换。
2.如何关联菜单按钮，实现打开和关闭侧滑菜单。

---------------------------------------SnackBar----------------------------------------------
Snackbar:的提出实际上是界于Toast和Dialog的中间产物。
Toast: 用户无法交互；
Dialog：用户可以交互，但是体验会打折扣，会阻断用户的连贯性操作；
Snackbar既可以做到轻量级的用户提醒效果，又可以有交互的功能（必须是一种非必须的操作）。

自定义吐司：

源码分析：
do{
	//不断地查找parent,实际上就是找到最外层的FrameLayout
	view.getParent();
}while()
.......
rootView.addView(view);//添加到最外层的布局容器里面

-------------------------------------TextInputLayout------------------------------------------
是强大的带提示的MD风格的Edittext
看源码：TextInputLayout extends android.widget.LinearLayout
<android.support.design.widget.TextInputLayout
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" 
        app:hintAnimationEnabled="true"
        >
        <EditText
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:hint="请输入用户名" />
</android.support.design.widget.TextInputLayout>

app:hintAnimationEnabled="true" ： 是否获得焦点的时候hint提示问题会动画地移动上去。
app:errorEnabled="true" 是都打开错误提示。
要使用错误提示还得自己定义规则。
 app:counterTextAppearance="" 可以自己修改计数的文字样式。
app:counterOverflowTextAppearance="" 超出字数范围后显示的警告的文字样式


源码分析

-------------------------------------MaterialDesign_Toolbar-------------------------------------
导航---顶部导航
以前：谷歌干脆规范了顶部导航---ActionBar（3.0API，也有兼容包）
后来：ActionBar开发起来很蛋疼（1.用来比较费劲；2.扩展性太差 太死板）
	大多数人都会使用一个民间的ActonBar，叫SherlockActionBar。
	谷歌就重新定义了一个Toolbar。现在又有个MaterialDesign的APPBar

作用：导航控件---显示标题、导航back、快捷操作、菜单等。而且Toolbar不一定要放在顶部，也可以放底部。

android.support.v7.widget.Toolbar

使用：
	1.引入support-v7包
	2.修改主题：    <style name="AppBaseTheme" parent="Theme.AppCompat.Light.NoActionBar">
		注意主题一定要使用：NoActionBar
	3.写布局，把Toolbar当做一个普通的容器使用。
	4.Activity--->AppcompatActivity
	5.使用Toolbar替换ActionBar
	setSupportActionBar(toolbar);

Toolbar属性：
	android:background="?attr/colorPrimary" 设置背景颜色，使用系统属性colorPrimary主色调。--在主题里面设置了。


让标题居中显示在toobar
    <android.support.v7.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="?attr/colorPrimary"
        app:title="网易新闻"
        >
		<TextView 
		    android:layout_width="wrap_content"
        	android:layout_height="wrap_content"
        	android:layout_gravity="center"//重点
        	android:text="textview"
        	/>
        
    </android.support.v7.widget.Toolbar>

//设置NavigationIcon的点击事件监听，比如返回按钮。
// app:navigationIcon="@drawable/abc_ic_ab_back_mtrl_am_alpha"
toolbar.setNavigationOnClickListener(new OnClickListener() {
	
	@Override
	public void onClick(View v) {
		finish();
	}
});

//将弹出的菜单泡泡窗体修改成黑底白字Dark；Light白底黑字
app:popupTheme="@style/ThemeOverlay.AppCompat.Dark"

-------------------------------------MaterialDesign_Toolbar_SearchView-------------------------------------



//作业：像AutoCompleteTextView一样使用提示
//		searchView.setSuggestionsAdapter(adapter)

作业：看SearchView的源码


-------------------------------实现新浪微博话题的Toolbar滑动半透明效果-------------------------------
1.监听ScrollView的滑动事件
不断地修改Toolbar透明度
2.
<RelativeLayout>
	<ScrollView>
	</ScrollView>
	<Toobar>
</RelativeLayout>
思路：给MyScrollView设置paddingTop
然后还要注意设置：
android:clipToPadding="false" 该控件的绘制范围是否不在Padding里面。false：绘制的时候范围会考虑padding即会往里面缩进。
android:clipChildren="false"  子控件是否能不超出padding的区域（比如ScrollView上滑动的时候，child可以滑出该区域）


------------------------------------Palette调色板---------------------------------------
1.引入v7里面的一个单独项目Palette，android.support.v7.graphics.Palette;
Palette：可以在一张图片里面分析出一些色彩特性：主色调、鲜艳的颜色、柔和颜色等等……



作业：看图说话！！做出图片的网格效果。

------------------------------------TabLayout---------------------------------------
选项卡：
1.以前，TabHost
android.support.design.widget.TabLayout

一、使用
TabLayout控件，切换Fragment
TabLayout+ViewPager+Fragment 

	1.引入Design兼容包

	app:tabIndicatorColor="@color/colorPrimary_pink"//指示器的颜色
        app:tabTextColor="@color/colorPrimary_pink"//tab的文字颜色
        app:tabSelectedTextColor="@color/colorPrimary_pinkDark"//选中的tab的文字颜色
        app:tabMode="fixed"//scrollable:可滑动；fixed：不能滑动，平分tabLayout宽度
        app:tabGravity="center"// fill:tabs平均填充整个宽度;center:tab居中显示

二、如何将TabLayout实现成底部导航的样子？
1.就把TabLayout放在布局底部
2.如何去掉底部的indicator，可以app:tabIndicatorHeight="0dp"
3.实现自己的效果，比如
微信：设置自定义的标签布局
	Tab tab = tabLayout.getTabAt(i);
	tab.setCustomView(view);


三、源码



作业：
1.tabLayout选项卡之间使用间隔线隔开
2.滑动变色。

---------------------------------MaterialDesign-沉浸式设计----------------------------------------
官方的沉浸式Translucent：就是让整个APP沉浸(充斥了整个屏幕)在屏幕里面，没有显示状态栏，甚至没有显示底部导航栏。
平时大家所讨论的沉浸式：比如QQ的顶部Toolbar和状态栏程一体的颜色。

兼容开发：
1. 5.0+ API
	5.0+自动实现了沉浸式效果，状态栏的颜色跟随你的主题里面的colorPrimaryDark属性。
	  
	1）通过设置主题达到
	<!-- Application theme. -->
	    <style name="AppTheme" parent="AppBaseTheme">
		<!-- All customizations that are NOT specific to a particular API-level can go here. -->
		<item name="android:textColor">@color/mytextcolor</item>
		<item name="colorPrimary">@color/colorPrimary_pink</item>
		<item name="colorPrimaryDark">@color/colorPrimary_pinkDark</item>
	<!--         <item name="android:windowBackground">@color/background</item> -->
	<!--         <item name="colorAccent">#906292</item> -->
	    </style>
	2）通过设置样式属性解决
		<item name="android:statusBarColor">@color/system_bottom_nav_color</item>
	3）通过代码设置
		//5.0+可以直接用API来修改状态栏的颜色。
		getWindow().setStatusBarColor(getResources().getColor(R.color.material_blue_grey_800));
		(注意：要在setContentView方法之前设置)
2. 4.4 API
（低于4.4API，不可以做到）
用到一些特殊手段！----4.4(KitKat)新出的API，可以设置状态栏为透明的。
	1.在属性样式里面解决（不推荐使用，因为兼容不好）
		<item name="android:windowTranslucentStatus">true</item>
	2.再代码里面解决
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		setContentView(R.layout.activity_main);
	出现副作用：
		APP的内容顶到最上面去了，即状态栏会遮挡一部分界面。很坑
	解决办法（有几种）：
		1）给Toolbar设置android:fitsSystemWindows="true"
		该属性的作用：设置布局时，是否考虑当前系统窗口的布局，如果为true就会调整整个系统窗口
				布局(包括状态栏的view)以适应你的布局。

		但是：又出现了一个bug,当里面有ScrollView并且ScrollView里面有Edittext的时候，就会出现软键盘一弹起就会把toolbar拉下来，很难看
		这种办法有什么价值呢？如果里面没有ScrollView就可以用。
		
		2）推荐
			灵感：发现给布局最外层容器设置android:fitsSystemWindows="true" 可以达到状态栏透明，并且露出底色---android:windowBackground颜色。
				不会出现toolbar被状态栏遮挡的情况。
			巧妙地解决：步骤：
				1.在最外层容器设置android:fitsSystemWindows="true"
				  不要给Toolbar设置android:fitsSystemWindows="true"
				2.直接将最外层容器(也可以修改-android:windowBackground颜色)设置成状态栏想要的颜色
				3.下面剩下的布局再包裹一层正常的背景颜色。

		3）修改Toolbar的高度
			1.不要给Toolbar设置android:fitsSystemWindows="true"
			2.
			需要知道状态栏的高度是多少？去源码里面找找
			    <!-- Height of the status bar -->
			    <dimen name="status_bar_height">24dp</dimen>
			    <!-- Height of the bottom navigation / system bar. -->
			    <dimen name="navigation_bar_height">48dp</dimen>
			    反射手机运行的类：android.R.dimen.status_bar_height.

			3.修改Toolbar的PaddingTop（因为纯粹增加toolbar的高度会遮挡toobar里面的一些内容）
				toolbar.setPadding(
					toolbar.getPaddingLeft(),
					toolbar.getPaddingTop()+getStatusBarHeight(this), 
					toolbar.getPaddingRight(),
					toolbar.getPaddingBottom());

			4.或者可以设置toolbar的高度（不推荐）




第三方的沉浸式解决方案：SystemTint。


作业：尝试自己封装；（判断版本，baseActivity）
思考：如何让虚拟导航也做出沉浸式效果。
	提示：5.0+ 可以用API解决  <item name="android:navigationBarColor">@color/system_bottom_nav_color</item>

--------------------------------如何让虚拟导航NavigationBar也做出沉浸式效果-----------------------------------

1. 5.x 底部虚拟导航沉浸效果
	1）属性解决
		navigationBarColor
	2）代码
		getWindow().setNavigationBarColor()
	

2. 4.4
用到一些特殊手段！----4.4(KitKat)新出的API，可以设置虚拟导航栏为透明的。
	步骤：
	1）在布局底部添加一个高度为0.1dp的view
	2）动态设置底部View的高度为虚拟导航栏的高度
	View nav = findViewById(R.id.nav);
	LayoutParams p = nav.getLayoutParams();
	p.height += getNavigationBarHeight(this);
	nav.setLayoutParams(p);

3.做兼容性判断
	1）SDK版本不一样
	两个区间：1. 大于5.0；2.=<4.4sdk<5.0

	2）有的没有虚拟导航栏
		判断是否有虚拟导航栏（源码里面有方法可以得到是否有虚拟导航，反射得到）

	3）有的有虚拟导航，但是还可以开关
		判断是否虚拟导航栏打开了

一步解决2）3）两个问题： NavigationBarHeight=整个屏幕的高度 - 内容部分view的高度 判断是否>0

作业：用另外一种方式做到低版本底部导航沉浸式的兼容。提示SnackBar。DecorView


-----------------------------------MaterialDesign_CardView----------------------------------------
兼容开发，引用v7目录下面的CardView项目
CardView： android-support-v7-cardView.jar
1.特性
	1) 边框圆角效果
		5.x 图片和布局都可以很好的呈现圆角效果，图片也变圆角了
		4.x 图不能变成圆角，如果要做成5.x一样的效果：通过加载图片的时候自己去处理成圆角
	2）阴影效果

	3）5.x上有Ripple水波纹效果（低版本需要自己做自定义的）
		android:foreground="?attr/selectableItemBackground"
		android:clickable="true"
	4）5.x实现按下的互动效果---下沉，松开弹起---Z轴位移效果 （低版本也需要自己自定义做）
		
	5）可以设置内容的内边距
	 app:contentPadding="5dp"

同一套布局的兼容性开发：(5.x上面不需要设置app:contentPadding="5dp"，而4.x上面不需要设置)
layout
layout-v21

细节：
	5.x上面，边距阴影比较小，需要手动添加边距16dp
	4.x上面，边距太大， 手动修改边距0dp（原因：兼容包里面设置阴影效果自动设置了margin来处理16dp）


<CardView
	app:cardCornerRadius="10dp" 圆角（半径值越大圆角就越明显）
	app:cardElevation="10dp" 阴影效果 （值越大阴影效果越明显）
	>
	<Linearlayout><TextView></>
</CardView>

-----------------------------------MaterialDesign_FloatingActionButton----------------------------------------

FloatingActionButton :悬浮动作按钮
特性：1.阴影效果--景深（反馈动作：按下去阴影加深elevation）
	2.水波纹效果

	//3.其他效果--自己做

兼容性注意:
	需要写两个layout/layout-v21
	layout-v21:添加layout_margin="16dp"
	layout: 添加layout_margin="0dp"

	app:backgroundTint="?attr/colorPrimary"背景着色
        app:elevation="10dp"阴影深度
        android:layout_margin="0dp"
        app:fabSize="mini"大小：normal，mini


作业：分析源码CardView和FloatingActionButton


-------------------------------CoordinatorLayout----------------------------------------

1.实现滑动RecyclerView,Fab显示和隐藏。

思路：1.监听RecyclerView的滑动
	2.fab执行显示和隐藏的动画

方法二：Behavior
RecyclerView+FloatingActionButton+CoordinatorLayout

CoordinatorLayout: 继承自ViewGroup。
	通过协调并调度里面的子控件或者布局来实现触摸（一般是指滑动）产生一些相关的动画效果。
	可以通过设置view的Behavior来实现触摸的动画调度。





作业：平行空间的欢迎页面效果实现。（提示：viewpager）










